#pragma once
#define _CRT_SECURE_NO_WARNINGS// Эта директива необходима, чтобы можно было использовать функции C для работы со строками. Короче она отключает безопасность при работе с памятью;
/*
	Подключаем необходимые библиотеки;
*/
#include <iostream>// Стандартная библиотека ввода\вывода для C++;
#include <iomanip>// Библиотека для использования манипуляторов;
#include <fstream>// Библиотека C++ для работы с файловыми потоками (рекомендую перечитать лекции)

using namespace std;// Подключаем пространство имён std

/*
	Класс WORKER(объявления);
*/
class WORKER
{
/*
	Данные;
*/
// Закрытые;
private:
	char *surnameWorking;// Фамилия рабочего;
	char *post;// Название занимаемой должности;
	int experience;// Стаж работника;
/*
	Функциональность класса WORKER;
*/
// Открытые;
public:
	/*
		Конструкторы;
	*/
	WORKER();// Конструктор по-умолчанию;
	~WORKER();// Деструктор по-умолчанию;
	WORKER(const char*, const char*, int);// Конструктор для заполнения всех полей класса: фамилия рабочего(surnameWorking), название занимаемой должности(post), год поступления на работу(yearEntry);
	WORKER(WORKER&);// Конструктор копирования;

	/*
		Операции;
	*/
	WORKER& operator = (WORKER&);// Операция присваивания
	bool operator < (WORKER&);// Операция сравнения "меньше" (возвращает истину, если фамилия работника у первого операнда раньше по алфавиту чем у второго операнда. [первый операнд - это this - объект, который вызывает эту операцию, то есть (worker1 < worker2) worker1 является вызывающим, так как он стоит раньше, чтобы понять можно привести аналогию (worker1.operator<(worker2)) - так на самом деле выглядит вызов, но компилятор нам позволяет писать более элегантно, то сеть так (worker1 < worker2)]);
	bool operator > (int);// Операция сравнения "больше" (возвращает истину, если стаж работника превышает данное число. Под данным работником понимается объект this *читай предыдущий комментарий*);

	/*
		Методы;
	*/
	void show();// Метод вывода на экран знаечний полей класса;
};